;;;; -*- Mode: LISP; Syntax: Ansi-Common-Lisp; Base: 10; Package: CL-POSTGRES; -*-

(in-package :saslprep)

(defun string-mapped-to-nothing (str)
  "Reads a string and removes any character that should be mapped to nothing per RFC 3454 and RFC 4013."
  (let ((s1 (coerce str 'simple-vector))
        (lst nil))
    (loop for x across s1 counting x into y do
         (cond ((char-mapped-to-nothing-p x))
               ((characterp x)
                (push x lst))
               (t (return-from string-mapped-to-nothing))))
    (setf lst (nreverse lst))
    (format nil "~{~A~}" lst)))

(defun string-mapped-to-space (str)
  "Reads a string and converts any character which should be mapped to a space pre RFC 3454 and RFC 4013 to a space."
  (let ((s1 (coerce str 'simple-vector)))
    (loop for x across s1 counting x into y do
         (when (char-mapped-to-space-p x)
           (setf (aref s1 (- y 1)) #\Space)))
    (coerce s1 'string)))

(defun saslprep-normalize (str &optional (form :nfkc))
  "Scans string. If any character should be mapped to nothing, it eliminates that character. If any character is not printable ascii, it returns nil. If every character remaining after eliminations is printable ascii, it returns the printable-ascii string. "
  (when (string-printable-ascii-p str)
    (return-from saslprep-normalize str))
  (setf str (string-mapped-to-nothing str))
  (setf str (string-mapped-to-space str))
  (setf str (uax-15:normalize str form))
  (let ((bidirectional-check nil))
    (loop for x across str counting x into y do
         (when (non-ascii-control-char-p x)
           (bad-char-error "prohibited non-ascii-control character in string per RFC 4013" :value x))
         (when (ascii-control-char-p x)
           (bad-char-error "prohibited ascii-control-character in string per RFC 4013" :value x))
         (when (private-use-char-p x)
           (bad-char-error "prohibited private-use-character in string per RFC 4013" :value x))
         (when (non-char-code-point-p x)
           (bad-char-error "prohibited non-char-code-point character in string per RFC 4013" :value x))
         (when (surrogate-code-point-p x)
           (bad-char-error "prohibited surrogate-code-point character in string per RFC 4013" :value x))
         (when (inappropriate-for-plain-text-char-p x)
           (bad-char-error "prohibited inappropriate-for-plain-text-character in string per RFC 4013" :value x))
         (when (inappropriate-for-canonical-representation-char-p x)
           (bad-char-error "prohibited inappropriate-for-canonical-representation character in string per RFC 4013" :value x))
         (when (change-display-property-char-p x)
           (bad-char-error "prohibited change-display-property  character in string per RFC 4013" :value x))
         (when (tagging-char-p x)
           (bad-char-error "prohibited tagging character in string per RFC 4013" :value x))
         (cond ((and (not bidirectional-check)
                     (char-with-bidirectional-property-R-or-AL-p x))
                (setf bidirectional-check "R"))
               ((and (not bidirectional-check)
                     (char-with-bidirectional-property-L-p x))
                (setf bidirectional-check "L"))
               ((and (equal bidirectional-check "L")
                     (char-with-bidirectional-property-R-or-AL-p x))
                (bad-char-error "Conflicting bidirectional characters in string" :value str))
               ((and (equal bidirectional-check "R")
                     (char-with-bidirectional-property-L-p x))
                (bad-char-error "Conflicting bidirectional characters in string" :value str))
               (t nil))))
  str)
